// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: pkg/proto/subcategory.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SubCategories_GetSubCategory_FullMethodName    = "/proto.SubCategories/GetSubCategory"
	SubCategories_GetSubCategories_FullMethodName  = "/proto.SubCategories/GetSubCategories"
	SubCategories_CreateSubCategory_FullMethodName = "/proto.SubCategories/CreateSubCategory"
	SubCategories_DeleteSubCategory_FullMethodName = "/proto.SubCategories/DeleteSubCategory"
)

// SubCategoriesClient is the client API for SubCategories service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubCategoriesClient interface {
	GetSubCategory(ctx context.Context, in *GetSubCategoryRequest, opts ...grpc.CallOption) (*GetSubCategoryResponse, error)
	GetSubCategories(ctx context.Context, in *GetSubCategoriesRequest, opts ...grpc.CallOption) (*GetSubCategoriesResponse, error)
	CreateSubCategory(ctx context.Context, in *CreateSubCategoryRequest, opts ...grpc.CallOption) (*CreateSubCategoryResponse, error)
	DeleteSubCategory(ctx context.Context, in *DeleteSubCategoryRequest, opts ...grpc.CallOption) (*DeleteSubCategoryResponse, error)
}

type subCategoriesClient struct {
	cc grpc.ClientConnInterface
}

func NewSubCategoriesClient(cc grpc.ClientConnInterface) SubCategoriesClient {
	return &subCategoriesClient{cc}
}

func (c *subCategoriesClient) GetSubCategory(ctx context.Context, in *GetSubCategoryRequest, opts ...grpc.CallOption) (*GetSubCategoryResponse, error) {
	out := new(GetSubCategoryResponse)
	err := c.cc.Invoke(ctx, SubCategories_GetSubCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subCategoriesClient) GetSubCategories(ctx context.Context, in *GetSubCategoriesRequest, opts ...grpc.CallOption) (*GetSubCategoriesResponse, error) {
	out := new(GetSubCategoriesResponse)
	err := c.cc.Invoke(ctx, SubCategories_GetSubCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subCategoriesClient) CreateSubCategory(ctx context.Context, in *CreateSubCategoryRequest, opts ...grpc.CallOption) (*CreateSubCategoryResponse, error) {
	out := new(CreateSubCategoryResponse)
	err := c.cc.Invoke(ctx, SubCategories_CreateSubCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subCategoriesClient) DeleteSubCategory(ctx context.Context, in *DeleteSubCategoryRequest, opts ...grpc.CallOption) (*DeleteSubCategoryResponse, error) {
	out := new(DeleteSubCategoryResponse)
	err := c.cc.Invoke(ctx, SubCategories_DeleteSubCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubCategoriesServer is the server API for SubCategories service.
// All implementations must embed UnimplementedSubCategoriesServer
// for forward compatibility
type SubCategoriesServer interface {
	GetSubCategory(context.Context, *GetSubCategoryRequest) (*GetSubCategoryResponse, error)
	GetSubCategories(context.Context, *GetSubCategoriesRequest) (*GetSubCategoriesResponse, error)
	CreateSubCategory(context.Context, *CreateSubCategoryRequest) (*CreateSubCategoryResponse, error)
	DeleteSubCategory(context.Context, *DeleteSubCategoryRequest) (*DeleteSubCategoryResponse, error)
	mustEmbedUnimplementedSubCategoriesServer()
}

// UnimplementedSubCategoriesServer must be embedded to have forward compatible implementations.
type UnimplementedSubCategoriesServer struct {
}

func (UnimplementedSubCategoriesServer) GetSubCategory(context.Context, *GetSubCategoryRequest) (*GetSubCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubCategory not implemented")
}
func (UnimplementedSubCategoriesServer) GetSubCategories(context.Context, *GetSubCategoriesRequest) (*GetSubCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubCategories not implemented")
}
func (UnimplementedSubCategoriesServer) CreateSubCategory(context.Context, *CreateSubCategoryRequest) (*CreateSubCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubCategory not implemented")
}
func (UnimplementedSubCategoriesServer) DeleteSubCategory(context.Context, *DeleteSubCategoryRequest) (*DeleteSubCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubCategory not implemented")
}
func (UnimplementedSubCategoriesServer) mustEmbedUnimplementedSubCategoriesServer() {}

// UnsafeSubCategoriesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubCategoriesServer will
// result in compilation errors.
type UnsafeSubCategoriesServer interface {
	mustEmbedUnimplementedSubCategoriesServer()
}

func RegisterSubCategoriesServer(s grpc.ServiceRegistrar, srv SubCategoriesServer) {
	s.RegisterService(&SubCategories_ServiceDesc, srv)
}

func _SubCategories_GetSubCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubCategoriesServer).GetSubCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubCategories_GetSubCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubCategoriesServer).GetSubCategory(ctx, req.(*GetSubCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubCategories_GetSubCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubCategoriesServer).GetSubCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubCategories_GetSubCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubCategoriesServer).GetSubCategories(ctx, req.(*GetSubCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubCategories_CreateSubCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubCategoriesServer).CreateSubCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubCategories_CreateSubCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubCategoriesServer).CreateSubCategory(ctx, req.(*CreateSubCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubCategories_DeleteSubCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubCategoriesServer).DeleteSubCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubCategories_DeleteSubCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubCategoriesServer).DeleteSubCategory(ctx, req.(*DeleteSubCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubCategories_ServiceDesc is the grpc.ServiceDesc for SubCategories service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubCategories_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SubCategories",
	HandlerType: (*SubCategoriesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubCategory",
			Handler:    _SubCategories_GetSubCategory_Handler,
		},
		{
			MethodName: "GetSubCategories",
			Handler:    _SubCategories_GetSubCategories_Handler,
		},
		{
			MethodName: "CreateSubCategory",
			Handler:    _SubCategories_CreateSubCategory_Handler,
		},
		{
			MethodName: "DeleteSubCategory",
			Handler:    _SubCategories_DeleteSubCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/subcategory.proto",
}
